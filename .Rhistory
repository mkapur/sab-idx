strata.limits.input = paste0("R",3:5))
strata.limits.input
ifelse(class(strata.limits.input) == "data.frame", 'Custom',paste(strata.limits.input ))
ifelse(class(strata.limits.input) == "data.frame", 'Custom',paste0(strata.limits.input ))
strata.limits.input
paste0(strata.limits.input )
c(paste0(strata.limits.input ))
c(paste0(c(strata.limits.input )))
paste0(strata.limits.input,collapse = "" )
stname <-  ifelse(class(strata.limits.input) == "data.frame", 'Custom',paste0(strata.limits.input,collapse = "" ))
stname
u
source("./R/build_Extrap.R")
## Build and/or load extraps
build_Extrap(Data_Geostat = Data_Geostat,
strata.limits.input = paste0("R",3:5))
## Load Data_Geostat(s)
list.files("./data/data_geostat") %>%lapply(.,load)
list.files("./data/data_geostat")
## Load Data_Geostat(s)
list.files("./data/data_geostat",full.names = T) %>%lapply(.,load)
Data_Geostat_AK <- readRDS("C:/Users/Maia Kapur/Dropbox/UW/sab-idx/data/data_geostat/Data_Geostat_AK.rds")
## Load Data_Geostat(s)
list.files("./data/data_geostat",full.names = T) %>%lapply(.,readRDS)
rm(Data_Geostat)
rm(Data_Geostat_AK)
## Load Data_Geostat(s)
list.files("./data/data_geostat",full.names = T) %>% lapply(.,readRDS)
rm(list = ls())
## Load Data_Geostat(s)
list.files("./data/data_geostat",full.names = T) %>% purrr::map_df(.,readRDS)
## load everything in directory
Data_Geostat <- list.files("./data/data_geostat",full.names = T) %>%
purrr::map_df(.,readRDS)
head(Data_Geostat)
unique(Data_Geostat$Survey)
unique(Data_Geostat$Year)
## Build and/or load extraps
build_Extrap(Data_Geostat = Data_Geostat,
strata.limits.input = paste0("R",3:5))
source("./R/build_Extrap.R")
## Build and/or load extraps
build_Extrap(Data_Geostat = Data_Geostat,
strata.limits.input = paste0("R",3:5))
source("./R/build_Extrap.R")
## Build and/or load extraps
build_Extrap(Data_Geostat = Data_Geostat,
strata.limits.input = paste0("R",3:5))
## Prep model and save inputs ----
RootDir <- paste0(getwd(),"/runs")
DataDir <- paste0( getwd(), "/data/" )
Data2Dir <- paste0( getwd(), "/data/" )
TmbDir <- system.file("executables", package <- "VAST")
Species <- "Anoplopoma fimbria"
n_x <- 100   # Specify number of stations (a.k.a. "knots")
DateFile <- paste0(RootDir,"/",Sys.Date(),"_",Species,"_nx=",n_x,"/")
dir.create(DateFile)
Version <- "VAST_v8_0_0" # get_latest_version( package<-"VAST" )
Method <- c("Grid", "Mesh", "Spherical_mesh")[2]
grid_size_km <- 25
FieldConfig <- matrix( c("Omega1"=1, "Epsilon1"=1, "Omega2"=1, "Epsilon2"=1, "Beta1"="IID", "Beta2"="IID"), nrow=3, byrow=TRUE )
RhoConfig <- c("Beta1"=0, "Beta2"=0, "Epsilon1"=4, "Epsilon2"=4)
OverdispersionConfig <- c("Eta1"=0, "Eta2"=0)
ObsModel <- list(c(2,0),c(2,3))[[1]]
#Covariate = c("None", "Bottom", "BotVar", "Cold_pool")[4]
Aniso <- FALSE
fine_scale <- FALSE
Options =  c("Calculate_Range"=FALSE, "Calculate_effective_area"=FALSE, "SD_site_logdensity"=FALSE)
# Run directory
RunDir <-
paste0(
DateFile,
"Obs=",
paste0(ObsModel, collapse = ""),
"_Field=",
paste0(FieldConfig, collapse = ""),
"_Rho=",
paste0(RhoConfig, collapse = ""),
"/"
)
# Run directory
RunDir <-
paste0(
DateFile,
"Obs=",
paste0(ObsModel, collapse = ""),
"_Field=",
paste0(FieldConfig, collapse = ""),
"_Rho=",
paste0(RhoConfig, collapse = ""),
"/"
)
RunDir
dir.create(RunDir)
## Build and/or load extraps
strata.limits.input <- paste0("R",3:5) ## gets used later to name file
paste0("./data/extraps/",paste0(strata.limits.input,collapse = "" ),"_extrap.rds")
# Run directory
RunDir <-
paste0(
DateFile,
"Obs=",
paste0(ObsModel, collapse = ""),
"_Field=",
paste0(FieldConfig, collapse = ""),
"_Rho=",
paste0(RhoConfig, collapse = ""),
"_REG=",
paste0(strata.limits.input,collapse = "" ),
"/"
)
RunDir
# Run directory
RunDir <-
paste0(
DateFile,
paste0(strata.limits.input,collapse = "" ),
"_Obs=",
paste0(ObsModel, collapse = ""),
"_Field=",
paste0(FieldConfig, collapse = ""),
"_Rho=",
paste0(RhoConfig, collapse = ""),
"/"
)
RunDir
# Run directory
RunDir <-
paste0(
DateFile,
paste0(strata.limits.input,collapse = "" ),
"_Obs=",
paste0(ObsModel, collapse = ""),
"_Field=",
paste0(FieldConfig, collapse = ""),
"_Rho=",
paste0(RhoConfig, collapse = ""),
"/"
)
dir.create(RunDir)
Record <- ThorsonUtilities::bundlelist( c("Version","Method","grid_size_km","n_x","FieldConfig","RhoConfig","OverdispersionConfig","ObsModel","Aniso","fine_scale","Options") )
save( Record, file=file.path(RunDir,"Record.RData"))
capture.output( Record, file=paste0(RunDir,"Record.txt"))
Spatial_List <- FishStatsUtils::make_spatial_info( grid_size_km=grid_size_km,
n_x=n_x,
fine_scale=fine_scale,
Method=Method,
Lon_i = Data_Geostat[,'Lon'],
Lat_i =Data_Geostat[,'Lat'],
LON_intensity=Extrapolation_List$Data_Extrap[which(Extrapolation_List$Data_Extrap[,'Include']==TRUE),'Lon'],
LAT_intensity=Extrapolation_List$Data_Extrap[which(Extrapolation_List$Data_Extrap[,'Include']==TRUE),'Lat'],
Extrapolation_List=Extrapolation_List, DirPath=RunDir, Save_Results=T )
Extrapolation_List <- build_Extrap(Data_Geostat = Data_Geostat,
strata.limits.input = strata.limits.input)
Spatial_List <- FishStatsUtils::make_spatial_info( grid_size_km=grid_size_km,
n_x=n_x,
fine_scale=fine_scale,
Method=Method,
Lon_i = Data_Geostat[,'Lon'],
Lat_i =Data_Geostat[,'Lat'],
LON_intensity=Extrapolation_List$Data_Extrap[which(Extrapolation_List$Data_Extrap[,'Include']==TRUE),'Lon'],
LAT_intensity=Extrapolation_List$Data_Extrap[which(Extrapolation_List$Data_Extrap[,'Include']==TRUE),'Lat'],
Extrapolation_List=Extrapolation_List, DirPath=RunDir, Save_Results=T )
################
# Run without bias correction
################
bias.correction <- TRUE
Run2Dir <- paste0(RunDir,"_","_BiasCorr=",bias.correction,"/")
dir.create(Run2Dir)
Run2Dir <- paste0(RunDir,"_BiasCorr=",bias.correction,"/")
Run2Dir
Run2Dir <- paste0(RunDir,"BiasCorr=",bias.correction,"/")
Run2Dir
Run2Dir <- paste0(RunDir,"BiasCorr=",bias.correction,"/")
dir.create(Run2Dir)
TmbData <- VAST::make_data(#"X_itp"=X_itp,
#"X_gtp"=X_gtp,
#"Xconfig_zcp"=Xconfig_zcp,
"Version"=Version,
"Aniso"=Aniso,
"FieldConfig"=FieldConfig,
"OverdispersionConfig"=OverdispersionConfig,
"RhoConfig"=RhoConfig,
"ObsModel"=ObsModel,
"c_i"=rep(0,nrow(Data_Geostat)),
"b_i"=Data_Geostat[,'Catch_KG'],
"a_i"=Data_Geostat[,'AreaSwept_km2'],
"v_i"=as.numeric(Data_Geostat[,'Vessel']),#-1,
"t_i"=Data_Geostat[,'Year'],
"spatial_list"=Spatial_List,
"Options"=Options )
sum(is.na(Data_Geostat$Catch_KG))
## AK RACE CPUE and BC StRs ----
# AKDS <- read.csv("./data/AK/race_cpue_by_haul.csv")  %>% filter(Starting.Longitude..dd. <=  0 & !is.na(Effort..km2.))
BCDS <- read.csv("./data/BC/BC_sable_survey_data.Aug262019.csv")  %>% filter(START_LONGITUDE <= 0 & !is.na(CPUE_TRAPS) & is.na(CPUE_SABLE_WEIGHT))
Data_Geostat <- data.frame( "Catch_KG"= BCDS$CPUE_SABLE_WEIGHT,
"Year"=  BCDS$SET_YEAR,
"Vessel"= BCDS$VESSEL_ID,
"AreaSwept_km2"=  BCDS$CPUE_TRAPS, #*100 (i think this actually put it in hectares if * 100)
"Lat"= BCDS$START_LATITUDE,
"Lon"= BCDS$START_LONGITUDE,
"Pass"=0,
"Stratum"= BCDS$SABLE_AREA_GROUP,
"Survey" = BCDS$SABLE_SET_TYPE)
rm(BCDS)
saveRDS(Data_Geostat, file = "./data/data_geostat/Data_Geostat_BC.rds")
## Load Data & Extrapolation grids ----
## load everything in directory
Data_Geostat <- list.files("./data/data_geostat",full.names = T) %>%
purrr::map_df(.,readRDS)
sum(is.na(Data_Geostat$AreaSwept_km2))
sum(Data_Geostat$AreaSwept_km2==0)
sum(Data_Geostat$AreaSwept_km2<0)
## Load Data & Extrapolation grids ----
## load everything in directory
Data_Geostat <- list.files("./data/data_geostat",full.names = T) %>%
purrr::map_df(.,readRDS)
sum(Data_Geostat$AreaSwept_km2<0)
sum(Data_Geostat$AreaSwept_km2==0)
summary(Data_Geostat$AreaSwept_km2)
Extrapolation_List <- build_Extrap(Data_Geostat = Data_Geostat,
strata.limits.input = strata.limits.input)
Spatial_List <- FishStatsUtils::make_spatial_info( grid_size_km=grid_size_km,
n_x=n_x,
fine_scale=fine_scale,
Method=Method,
Lon_i = Data_Geostat[,'Lon'],
Lat_i =Data_Geostat[,'Lat'],
LON_intensity=Extrapolation_List$Data_Extrap[which(Extrapolation_List$Data_Extrap[,'Include']==TRUE),'Lon'],
LAT_intensity=Extrapolation_List$Data_Extrap[which(Extrapolation_List$Data_Extrap[,'Include']==TRUE),'Lat'],
Extrapolation_List=Extrapolation_List, DirPath=RunDir, Save_Results=T )
TmbData <- VAST::make_data(#"X_itp"=X_itp,
#"X_gtp"=X_gtp,
#"Xconfig_zcp"=Xconfig_zcp,
"Version"=Version,
"Aniso"=Aniso,
"FieldConfig"=FieldConfig,
"OverdispersionConfig"=OverdispersionConfig,
"RhoConfig"=RhoConfig,
"ObsModel"=ObsModel,
"c_i"=rep(0,nrow(Data_Geostat)),
"b_i"=Data_Geostat[,'Catch_KG'],
"a_i"=Data_Geostat[,'AreaSwept_km2'],
"v_i"=as.numeric(Data_Geostat[,'Vessel']),#-1,
"t_i"=Data_Geostat[,'Year'],
"spatial_list"=Spatial_List,
"Options"=Options )
## ensure that VAST vXXXX is in the directory specified in TmbDir
TmbList <-  VAST::make_model("build_model"=TRUE, "TmbData"=TmbData, "RunDir"=getwd(), "Version"=Version,
"RhoConfig"=RhoConfig, "loc_x"=Spatial_List$loc_x, "Method"=Method, "TmbDir"=TmbDir)
Obj <- TmbList[["Obj"]]
Opt <- TMBhelper::fit_tmb( obj=Obj, getsd=TRUE, savedir=Run2Dir, getReportCovariance=FALSE, bias.correct=bias.correction,
newtonsteps=1, bias.correct.control=list(sd=FALSE, split=NULL, nsplit=1, vars_to_correct="Index_cyl") )
Report <- Obj$report()
Save <-
list(
"Opt" = Opt,
"Report" = Report,
"ParHat" = Obj$env$parList(Opt$par),
"SDReport" = TMB::sdreport(Obj),
"TmbData" = TmbData
)
save(Save, file=paste0(Run2Dir,"Save.RData")) ## save it in subdir
load(paste0(Run2Dir,"parameter_estimates.Rdata")) ## save it in subdir
FishStatsUtils::plot_biomass_index(TmbData,
Sdreport = Save$SDReport,
DirName = Run2Dir)
strata.limits.input
paste0('Region ',substr(strata.limits.input,1,2)
)
strata_names = paste0('Region ',substr(strata.limits.input,2,2))
FishStatsUtils::plot_biomass_index(TmbData,
Sdreport = Save$SDReport,
DirName = Run2Dir,
strata_names = paste0('Region ',substr(strata.limits.input,2,2)))
cpue <- read.csv(paste0(Run2Dir,"/Table_for_SS3.csv"))
library(ggplot2)
head(cpue)
ggplot(.,aes(x = Year, y = Estimate_metric_tons)) +
geom_line() +
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons)) +
geom_line() +
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
geom_line() +
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_minimal()+
geom_line() +
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
require(kaputils)
devtools::install_github('mkapur/kaputils',dependencies = F)
require(kaputils)
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
# theme_minimal()+
kaputils::theme_mk()+
theme(panel.grid = element_blank())
devtools::install_github('mkapur/kaputils',dependencies = F)
require(kaputils)
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
# theme_minimal()+
kaputils::theme_mk()+
theme(panel.grid = element_blank())
library(kaputils)
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
# theme_minimal()+
kaputils::theme_mk()+
theme(panel.grid = element_blank())
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
# theme_minimal()+
theme_mk()+
theme(panel.grid = element_blank())
kaputils
?kaputils
??kaputils
source("C:/Users/mkapur/Dropbox/kaputils/R/theme_mk.R")
source("C:/Users/maia kapur/Dropbox/kaputils/R/theme_mk.R")
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
# theme_minimal()+
kaputils::theme_mk()+
theme(panel.grid = element_blank())
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
# theme_minimal()+
theme_mk()+
theme(panel.grid = element_blank())
source("C:/Users/maia kapur/Dropbox/kaputils/R/theme_mk.R")
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
# theme_minimal()+
theme_mk()+
theme(panel.grid = element_blank())
source("C:/Users/maia kapur/Dropbox/kaputils/R/theme_mk.R")
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
# theme_minimal()+
theme_mk()+
theme(panel.grid = element_blank())
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
geom_line()+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
source("C:/Users/maia kapur/Dropbox/kaputils/R/theme_mk.R")
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
geom_line()+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
geom_line()+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
source("C:/Users/maia kapur/Dropbox/kaputils/R/theme_mk.R")
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
geom_line()+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
source("C:/Users/maia kapur/Dropbox/kaputils/R/theme_mk.R")
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
geom_line()+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
geom_line(lwd = 1.1)+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
geom_line(lwd = 0.9)+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
cpue
years <- Data_Geostat$Year
Year_Set <- seq(min(years), max(years))
Years2Include <- which(Year_Set %in% sort(unique(years)))
FishStatsUtils::plot_biomass_index(TmbData,
Sdreport = Save$SDReport,
DirName = Run2Dir,
strata_names = paste0('Region ',substr(strata.limits.input,2,2)))
cpue <- read.csv(paste0(Run2Dir,"/Table_for_SS3.csv"))
cpue
Years2Include
Year_Set
cpue <- read.csv(paste0(Run2Dir,"/Table_for_SS3.csv")) %>%
mutate(Year = seq(min(Data_Geostat$Year), max(Data_Geostat$Year)))
cpue
read.csv(paste0(Run2Dir,"/Table_for_SS3.csv"))
cpue <- %>%
mutate(Year = seq(min(Data_Geostat$Year), max(Data_Geostat$Year)))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
geom_line(lwd = 0.9)+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
cpue <- read.csv(paste0(Run2Dir,"/Table_for_SS3.csv")) %>%
mutate(Year = seq(min(Data_Geostat$Year), max(Data_Geostat$Year)))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
geom_line(lwd = 0.9)+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
geom_line(lwd = 0.9)+
scale_y_continuous(limits = c(0,80000))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
geom_line(lwd = 0.9)+
scale_y_continuous(limits = c(0,950000))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
geom_line(lwd = 0.9)+
scale_y_continuous(limits = c(0,95000))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
scale_y_continuous(limits = c(0,95000)) +
geom_line(lwd = 0.9)+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt))
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
scale_y_continuous(limits = c(0,95000)) +
geom_line(lwd = 0.9)+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt), lwd = 0.9)
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
scale_y_continuous(limits = c(0,95000)) +
scale_color_brewer(palette = 'Accent')
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
scale_y_continuous(limits = c(0,95000)) +
scale_color_brewer(palette = 'Accent') +
geom_line(lwd = 0.9)+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt), lwd = 0.9)
ggplot(cpue,aes(x = Year, y = Estimate_metric_tons, col = Fleet)) +
theme_mk()+
theme(panel.grid = element_blank()) +
scale_y_continuous(limits = c(0,95000)) +
scale_color_brewer(palette = 'Accent') +
labs(x = 'Year', y = 'Estimate (mt)', title = paste0('VAST-Standardized Indices')) +
geom_line(lwd = 0.9)+
geom_errorbar(aes(ymin = Estimate_metric_tons-SD_mt, ymax = Estimate_metric_tons+SD_mt), lwd = 0.9)
ggsave(plot = last_plot(), file = paste0(Run2Dir,"Index-Biomass2.png"), height = 6, width = 8, unit='in',dpi = 520)
head(Data_Geostat)
## EDA on effort metrics
Data_Geostat %>% group_by(Survey) %>%
summarise(AreaSwept_km2)
head(Data_Geostat)
## AK Race CPUE by HAUL ----
AKDS <- read.csv("./data/AK/race_cpue_by_haul.csv")  %>% filter( Starting.Longitude..dd. <=  0 & !is.na(Effort..km2.))
Data_Geostat <- data.frame( "Catch_KG"= AKDS$Weight..kg.,
"Year"=  AKDS$Year,
"Vessel"= AKDS$Vessel.Number,
"AreaSwept_km2"=  AKDS$Effort..km2., #*100 (i think this actually put it in hectares if * 100)
"Lat"= AKDS$Starting.Latitude..dd.,
"Lon"= AKDS$Starting.Longitude..dd.,
"Pass"=0,
"Stratum"= AKDS$Stratum.INPFC.Area,
"Survey" = AKDS$Survey,
"State" = rep('Alaska',nrow(AKDS)))
rm(AKDS)
saveRDS(Data_Geostat, file = "./data/data_geostat/Data_Geostat_AK.rds")
## AK RACE CPUE and BC StRs ----
# AKDS <- read.csv("./data/AK/race_cpue_by_haul.csv")  %>% filter(Starting.Longitude..dd. <=  0 & !is.na(Effort..km2.))
BCDS <- read.csv("./data/BC/BC_sable_survey_data.Aug262019.csv")  %>% filter(START_LONGITUDE <= 0 & !is.na(CPUE_TRAPS) & is.na(CPUE_SABLE_WEIGHT))
Data_Geostat <- data.frame( "Catch_KG"= BCDS$CPUE_SABLE_WEIGHT,
"Year"=  BCDS$SET_YEAR,
"Vessel"= BCDS$VESSEL_ID,
"AreaSwept_km2"=  BCDS$CPUE_TRAPS, #*100 (i think this actually put it in hectares if * 100)
"Lat"= BCDS$START_LATITUDE,
"Lon"= BCDS$START_LONGITUDE,
"Pass"=0,
"Stratum"= BCDS$SABLE_AREA_GROUP,
"Survey" = BCDS$SABLE_SET_TYPE,
"State" = rep('BritishColumbia',nrow(BCDS)))
rm(BCDS)
saveRDS(Data_Geostat, file = "./data/data_geostat/Data_Geostat_BC.rds")
## Load Data & Extrapolation grids ----
## load everything in directory
Data_Geostat <- list.files("./data/data_geostat",full.names = T) %>%
purrr::map_df(.,readRDS)
## EDA on effort metrics
Data_Geostat %>% group_by(State) %>%
summarise(AreaSwept_km2)
head(Data_Geostat)
## EDA on effort metrics
Data_Geostat %>% group_by(State) %>%
dplyr::summarise(AreaSwept_km2)
## EDA on effort metrics
Data_Geostat %>% group_by(State) %>%
dplyr::summarise(State)
## EDA on effort metrics
Data_Geostat %>% group_by(State) %>%
dplyr::summarise(mean(AreaSwept_km2))
## AK RACE CPUE and BC StRs ----
# AKDS <- read.csv("./data/AK/race_cpue_by_haul.csv")  %>% filter(Starting.Longitude..dd. <=  0 & !is.na(Effort..km2.))
BCDS <- read.csv("./data/BC/BC_sable_survey_data.Aug262019.csv")  %>% filter(START_LONGITUDE <= 0 & !is.na(CPUE_TRAPS) & is.na(CPUE_SABLE_WEIGHT))
head(bcds)
head(BCDS)
0.3^0
0.7^5
