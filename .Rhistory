PlotDF = MapDetails_List[["PlotDF"]],
working_dir = NA,
Year_Set = Year_Set,
Years2Include = (1:length(Year_Set))[Year_Set >1994 & Year_Set %%5==0],
projargs = projargs_plot,
country = c("united states of america", "canada", "mexico", "russia", 'japan')
)
n_x
n_k
#projargs_plot = "+proj=moll +lon_0=-150 +datum=WGS84 +units=km"
#projargs_plot = "+proj=natearth +lon_0=-180 +datum=WGS84 +units=km"
plot_maps(
plot_set = 3,
Report = Save$Report,
PlotDF = MapDetails_List[["PlotDF"]],
working_dir = NA,
Year_Set = Year_Set,
# Years2Include = (1:length(Year_Set))[Year_Set >1994 & Year_Set %%5==0],
projargs = projargs_plot,
country = c("united states of america", "canada", "mexico", "russia", 'japan')
)
MapDetails_List[["PlotDF"]]
#projargs_plot = "+proj=moll +lon_0=-150 +datum=WGS84 +units=km"
#projargs_plot = "+proj=natearth +lon_0=-180 +datum=WGS84 +units=km"
plot_maps(
plot_set = 3,
Report = Save$Report,
PlotDF = MapDetails_List[["PlotDF"]],
working_dir = NA,
Year_Set = Year_Set,
Years2Include = (1:length(Year_Set))[Year_Set >1994 & Year_Set %%5==0],
projargs = projargs_plot,
country = c("united states of america", "canada", "mexico", "russia", 'japan')
)
#projargs_plot = "+proj=moll +lon_0=-150 +datum=WGS84 +units=km"
#projargs_plot = "+proj=natearth +lon_0=-180 +datum=WGS84 +units=km"
plot_maps(
plot_set = 1,
Report = Save$Report,
PlotDF = MapDetails_List[["PlotDF"]],
working_dir = NA,
Year_Set = Year_Set,
Years2Include = (1:length(Year_Set))[Year_Set >1994 & Year_Set %%5==0],
projargs = projargs_plot,
country = c("united states of america", "canada", "mexico", "russia", 'japan')
)
#projargs_plot = "+proj=moll +lon_0=-150 +datum=WGS84 +units=km"
#projargs_plot = "+proj=natearth +lon_0=-180 +datum=WGS84 +units=km"
plot_maps(
plot_set = 2,
Report = Save$Report,
PlotDF = MapDetails_List[["PlotDF"]],
working_dir = NA,
Year_Set = Year_Set,
Years2Include = (1:length(Year_Set))[Year_Set >1994 & Year_Set %%5==0],
projargs = projargs_plot,
country = c("united states of america", "canada", "mexico", "russia", 'japan')
)
#projargs_plot = "+proj=moll +lon_0=-150 +datum=WGS84 +units=km"
#projargs_plot = "+proj=natearth +lon_0=-180 +datum=WGS84 +units=km"
plot_maps(
plot_set = 3,
Report = Save$Report,
PlotDF = MapDetails_List[["PlotDF"]],
working_dir = NA,
Year_Set = Year_Set,
Years2Include = (1:length(Year_Set))[Year_Set >1994 & Year_Set %%5==0],
projargs = projargs_plot,
country = c("united states of america", "canada", "mexico", "russia", 'japan')
)
MapDetails_List[["PlotDF"]]
#projargs_plot = "+proj=moll +lon_0=-150 +datum=WGS84 +units=km"
#projargs_plot = "+proj=natearth +lon_0=-180 +datum=WGS84 +units=km"
plot_maps(
plot_set = 3,
Report = Save$Report,
PlotDF = MapDetails_List[["PlotDF"]],
working_dir = NA,
Year_Set = Year_Set,
Years2Include = (1:length(Year_Set))[Year_Set >1994 & Year_Set %%5==0],
projargs = projargs_plot,
country = c("united states of america", "canada", "mexico", "russia", 'japan')
)
names(Save$Report)
Report = Save$Report
if("D_xt"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_xt") )
if("D_xct"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_xct") )
if("D_xcy"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_xcy") )
if("D_gcy"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_gcy") )
if("D_gct"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_gct") )
if("dhat_ktp" %in% names(Report)) Array_xct = aperm(extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="dhat_ktp")[,,cI],c(1,3,2))
if("dpred_ktp" %in% names(Report)) Array_xct = aperm(extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="dpred_ktp")[,,cI],c(1,3,2))
extract_value = function( Sdreport, Report, Obj, variable_name, plot_value="estimate", n_samples, sample_fixed=TRUE ){
if( missing(Report) ){
Report = Obj$report()
}
if( is.function(plot_value) ){
if(missing(Obj)) stop("Must provide `Obj` for `extract_value(.)` in `plot_maps(.)` when specifying a function for argument `plot_value`")
Var_r = sample_variable( Sdreport=Sdreport, Obj=Obj, variable_name=variable_name, n_samples=n_samples, sample_fixed=sample_fixed )
Return = apply( Var_r, MARGIN=1:(length(dim(Var_r))-1), FUN=plot_value )
if( any(dim(Return)!=dim(Report[[variable_name]])) ){
stop("Check `extract_value(.)` in `plot_maps(.)`")
}
}else if( plot_value=="estimate" ){
Return = Report[[variable_name]]
}else stop("Check input `plot_value` in `plot_maps(.)`")
return( Return )
# apply( Var_r, MARGIN=c(2,4), FUN=function(mat){sum(abs(mat)==Inf)})
}
if("D_xt"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_xt") )
if("D_xct"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_xct") )
if("D_xcy"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_xcy") )
if("D_gcy"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_gcy") )
if("D_gct"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_gct") )
if("dhat_ktp" %in% names(Report)) Array_xct = aperm(extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="dhat_ktp")[,,cI],c(1,3,2))
if("dpred_ktp" %in% names(Report)) Array_xct = aperm(extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="dpred_ktp")[,,cI],c(1,3,2))
plot_value = 'estimate'
if("D_xt"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_xt") )
if("D_xct"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_xct") )
if("D_xcy"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_xcy") )
if("D_gcy"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_gcy") )
if("D_gct"%in%names(Report)) Array_xct = log( extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="D_gct") )
if("dhat_ktp" %in% names(Report)) Array_xct = aperm(extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="dhat_ktp")[,,cI],c(1,3,2))
if("dpred_ktp" %in% names(Report)) Array_xct = aperm(extract_value(Sdreport=Sdreport, Obj=Obj, Report=Report, plot_value=plot_value, sample_fixed=sample_fixed, n_samples=n_samples, variable_name="dpred_ktp")[,,cI],c(1,3,2))
Years2Include = (1:length(Year_Set))[Year_Set >1994 & Year_Set %%5==0]
projargs = projargs_plot
PlotDF = MapDetails_List[["PlotDF"]]
if(length(dim(Array_xct))==2) Nplot = 1
if(length(dim(Array_xct))==3) Nplot = dim(Array_xct)[2]
for( cI in 1:Nplot){
if(length(dim(Array_xct))==2) Return = Mat_xt = Array_xct
if(length(dim(Array_xct))==3) Return = Mat_xt = array(as.vector(Array_xct[,cI,]),dim=dim(Array_xct)[c(1,3)])
file_name = paste0(plot_code, ifelse(Nplot>1, paste0("--",category_names[cI]), ""), ifelse(is.function(plot_value),"-transformed","-predicted") )
plot_args = plot_variable( Y_gt=Mat_xt[,years_to_include,drop=FALSE],
map_list=list("PlotDF"=PlotDF, "MapSizeRatio"=MapSizeRatio), projargs=projargs, working_dir=working_dir,
panel_labels=Year_Set[years_to_include], file_name=file_name, n_cells=n_cells, zlim=zlim, country=country, ... )
}
plot_code <- c("encounter_prob", "pos_catch", "ln_density", "", "", "epsilon_1", "epsilon_2",
"linear_predictor_1", "linear_predictor_2", "density_CV", "covariates", "total_density",
"covariate_effects_1", "covariate_effects_2", "omega_1", "omega_2")[3]
for( cI in 1:Nplot){
if(length(dim(Array_xct))==2) Return = Mat_xt = Array_xct
if(length(dim(Array_xct))==3) Return = Mat_xt = array(as.vector(Array_xct[,cI,]),dim=dim(Array_xct)[c(1,3)])
file_name = paste0(plot_code, ifelse(Nplot>1, paste0("--",category_names[cI]), ""), ifelse(is.function(plot_value),"-transformed","-predicted") )
plot_args = plot_variable( Y_gt=Mat_xt[,years_to_include,drop=FALSE],
map_list=list("PlotDF"=PlotDF, "MapSizeRatio"=MapSizeRatio), projargs=projargs, working_dir=working_dir,
panel_labels=Year_Set[years_to_include], file_name=file_name, n_cells=n_cells, zlim=zlim, country=country, ... )
}
#projargs_plot = "+proj=moll +lon_0=-150 +datum=WGS84 +units=km"
#projargs_plot = "+proj=natearth +lon_0=-180 +datum=WGS84 +units=km"
plot_maps(
plot_set = 3,
Report = Save$Report,
PlotDF = MapDetails_List[["PlotDF"]],
working_dir = NA,
Year_Set = Year_Set,
Years2Include = (1:length(Year_Set))[Year_Set >1994 & Year_Set %%5==0],
projargs = projargs_plot,
country = c("united states of america", "canada", "mexico", "russia", 'japan')
)
source("https://github.com/James-Thorson-NOAA/FishStatsUtils/blob/fc564104b59999af7156b22dcca6c623e51cdd9a/R/plot_maps.r")
devtools::source_url("https://github.com/James-Thorson-NOAA/FishStatsUtils/blob/fc564104b59999af7156b22dcca6c623e51cdd9a/R/plot_maps.r")
devtools::source_url("https://raw.githubusercontent.com/James-Thorson-NOAA/FishStatsUtils/fc564104b59999af7156b22dcca6c623e51cdd9a/R/plot_maps.r")
#projargs_plot = "+proj=moll +lon_0=-150 +datum=WGS84 +units=km"
#projargs_plot = "+proj=natearth +lon_0=-180 +datum=WGS84 +units=km"
plot_maps(
plot_set = 3,
Report = Save$Report,
PlotDF = MapDetails_List[["PlotDF"]],
working_dir = NA,
Year_Set = Year_Set,
Years2Include = (1:length(Year_Set))[Year_Set >1994 & Year_Set %%5==0],
projargs = projargs_plot,
country = c("united states of america", "canada", "mexico", "russia", 'japan')
)
sab2019_2 <- read.csv(here('data',"sab2019update_vast.csv"))%>%
# sab2019$Fleet[sab2019$Fleet == 'All_areas'] <- "2019 WCBTS Used in Assessment"
mutate(Unit = NA, SD_mt = NA, Fleet = Fleet_name ) %>%
select(Yr, Unit, Fleet, Obs, SE, SD_mt)
# "SAB_2019_Assessment CPUE [vast]"
names(sab2019_2)[c(1,4,5)] <- c('Year','Estimate_metric_tons', "SD_log")
DateFile <-"C:/Users/mkapur/Dropbox/UW/sab-idx/runs/2020-01-23_nx=500_Triennial_WCGBTS_BCs_BCo_AK_DOM_LL_GOA_baseQ=AK_DOM_LL1980_2018/"
DateFile <-"C:/Users/mkapur/Dropbox/UW/sab-idx/runs/2020-09-22_nx=250_Triennial_WCGBTS_BCs_BCo_AK_DOM_LL_GOA_baseQ=AK_DOM_LL1980_2019/"
## see line 81 here for conv https://github.com/James-Thorson-NOAA/FishStatsUtils/blob/master/R/plot_index.R
vastc <-
# vastc <- read.csv("C:/Users/mkapur/Dropbox/UW/sab-idx/runs/2020-01-23_nx=500_Triennial_WCGBTS_BCs_BCo_AK_DOM_LL_GOA_baseQ=AK_DOM_LL1980_2018/Table_for_SS3.csv") %>%
read.csv(paste0(DateFile,"Table_for_SS3.csv")) %>%
mutate(TYPE = 'Abundance', Source = 'VAST',
lci = Estimate_metric_tons-SD_mt,
uci = Estimate_metric_tons+SD_mt) %>%
select(Year, Fleet, Estimate_metric_tons, SD_log, TYPE, Source, uci, lci ) #%>%
# filter(Fleet != 'Gulf_of_Alaska')
vastc$Fleet2 <- NA
for(i in 1:nrow(vastc)){
vastc$Fleet2[i] <- ifelse(vastc$Fleet[i] == "California_current",
"WC",
ifelse(vastc$Fleet[i] == "British_Columbia", "BC",
"AK"))
if(vastc$Fleet[i] == 'AllAreas')   vastc$Fleet2[i] <- "ALL"
}
fleetSel <- c(1:4,6,7,10,8,11,12)
custnames <- c(paste0('VAST ',c('California Current','British Columbia',
'Aleutian Islands', 'Gulf of Alaska','Eastern Bering Sea') ),
'AK Domestic Longline', "AK Gulf Trawl", 'BC Offshore Standardized','BC Synoptic Trawl','BC Trap Stratified',
'Triennial','WCGBTS')[fleetSel]
## compare_all plot ----
rbind(vastc,assc) %>%
filter(Fleet2 %in% c('WC','BC', 'AK')[1:3]) %>%
filter(Fleet %in% c("California_current","British_Columbia",
'Aleutian_Islands',"Gulf_of_Alaska",
"Eastern_Bering_Sea",
'AK_DOM_LL',"AK_GOA_TRW",'BC_OFFSHORE_STD',
"Filter_BCTrawl","Filter_StRS", "AKSHLF",  "NWCBO")[fleetSel]) %>%
filter(Year < 2019) %>%
# filter(Fleet %in% c("British_Columbia","Filter_BCTrawl")) %>%
ggplot(., aes(x = Year, y = Estimate_metric_tons,
col = Fleet, linetype = Fleet)) +
theme_bw()+
# kaputils::theme_black()+
theme(panel.grid = element_blank(),
legend.position = 'right',
legend.text = element_text(size = 12),
strip.text.x = element_text(
size = 16
)) +
geom_line(lwd = 1) +
geom_ribbon(aes(ymin = lci, ymax = uci, fill = Fleet),
alpha = 0.15, col = 'grey',
show.legend = FALSE) +
scale_x_continuous(limits = c(1980,2018),
breaks = seq(1980,2020,10)) +
scale_fill_manual(values = c(rep('blue',3), 'dodgerblue3',
cbbPalette),
labels = c(custnames)) +
scale_color_manual( values = c(rep('blue',3), 'dodgerblue3',
cbbPalette),
labels = c(custnames)) +
scale_linetype_manual(values = c(rep('solid',4),
rep('dashed',40)),
labels = c(custnames)) +
labs(x = 'Year', y = 'Estimate (mt)', color = "", linetype = "",
title = '',
subtitle = 'BC&AK assessment vals have been multiplied by 1000;
input dat was div by 1000') +
facet_wrap(~Fleet2, scales = 'free_y', ncol = 3)
# write.csv(assc, file = here("data","assc.csv"), row.names = FALSE)
assc <- read.csv(here("data","assc.csv"))
## compare_all plot ----
rbind(vastc,assc) %>%
filter(Fleet2 %in% c('WC','BC', 'AK')[1:3]) %>%
filter(Fleet %in% c("California_current","British_Columbia",
'Aleutian_Islands',"Gulf_of_Alaska",
"Eastern_Bering_Sea",
'AK_DOM_LL',"AK_GOA_TRW",'BC_OFFSHORE_STD',
"Filter_BCTrawl","Filter_StRS", "AKSHLF",  "NWCBO")[fleetSel]) %>%
filter(Year < 2019) %>%
# filter(Fleet %in% c("British_Columbia","Filter_BCTrawl")) %>%
ggplot(., aes(x = Year, y = Estimate_metric_tons,
col = Fleet, linetype = Fleet)) +
theme_bw()+
# kaputils::theme_black()+
theme(panel.grid = element_blank(),
legend.position = 'right',
legend.text = element_text(size = 12),
strip.text.x = element_text(
size = 16
)) +
geom_line(lwd = 1) +
geom_ribbon(aes(ymin = lci, ymax = uci, fill = Fleet),
alpha = 0.15, col = 'grey',
show.legend = FALSE) +
scale_x_continuous(limits = c(1980,2018),
breaks = seq(1980,2020,10)) +
scale_fill_manual(values = c(rep('blue',3), 'dodgerblue3',
cbbPalette),
labels = c(custnames)) +
scale_color_manual( values = c(rep('blue',3), 'dodgerblue3',
cbbPalette),
labels = c(custnames)) +
scale_linetype_manual(values = c(rep('solid',4),
rep('dashed',40)),
labels = c(custnames)) +
labs(x = 'Year', y = 'Estimate (mt)', color = "", linetype = "",
title = '',
subtitle = 'BC&AK assessment vals have been multiplied by 1000;
input dat was div by 1000') +
facet_wrap(~Fleet2, scales = 'free_y', ncol = 3)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
## compare_all plot ----
rbind(vastc,assc) %>%
filter(Fleet2 %in% c('WC','BC', 'AK')[1:3]) %>%
filter(Fleet %in% c("California_current","British_Columbia",
'Aleutian_Islands',"Gulf_of_Alaska",
"Eastern_Bering_Sea",
'AK_DOM_LL',"AK_GOA_TRW",'BC_OFFSHORE_STD',
"Filter_BCTrawl","Filter_StRS", "AKSHLF",  "NWCBO")[fleetSel]) %>%
filter(Year < 2019) %>%
# filter(Fleet %in% c("British_Columbia","Filter_BCTrawl")) %>%
ggplot(., aes(x = Year, y = Estimate_metric_tons,
col = Fleet, linetype = Fleet)) +
theme_bw()+
# kaputils::theme_black()+
theme(panel.grid = element_blank(),
legend.position = 'right',
legend.text = element_text(size = 12),
strip.text.x = element_text(
size = 16
)) +
geom_line(lwd = 1) +
geom_ribbon(aes(ymin = lci, ymax = uci, fill = Fleet),
alpha = 0.15, col = 'grey',
show.legend = FALSE) +
scale_x_continuous(limits = c(1980,2018),
breaks = seq(1980,2020,10)) +
scale_fill_manual(values = c(rep('blue',3), 'dodgerblue3',
cbbPalette),
labels = c(custnames)) +
scale_color_manual( values = c(rep('blue',3), 'dodgerblue3',
cbbPalette),
labels = c(custnames)) +
scale_linetype_manual(values = c(rep('solid',4),
rep('dashed',40)),
labels = c(custnames)) +
labs(x = 'Year', y = 'Estimate (mt)', color = "", linetype = "",
title = '',
subtitle = 'BC&AK assessment vals have been multiplied by 1000;
input dat was div by 1000') +
facet_wrap(~Fleet2, scales = 'free_y', ncol = 3)
## compare_all plot ----
rbind(vastc,assc) %>%
filter(Fleet2 %in% c('WC','BC', 'AK')[1:3]) %>%
filter(Fleet %in% c("California_current","British_Columbia",
'Aleutian_Islands',"Gulf_of_Alaska",
"Eastern_Bering_Sea",
'AK_DOM_LL',"AK_GOA_TRW",'BC_OFFSHORE_STD',
"Filter_BCTrawl","Filter_StRS", "AKSHLF",  "NWCBO")[fleetSel]) %>%
filter(Year < 2019) %>%
# filter(Fleet %in% c("British_Columbia","Filter_BCTrawl")) %>%
ggplot(., aes(x = Year, y = Estimate_metric_tons,
col = Fleet, linetype = Fleet)) +
theme_bw()+
# kaputils::theme_black()+
theme(panel.grid = element_blank(),
legend.position = 'right',
legend.text = element_text(size = 12),
strip.text.x = element_text(
size = 16
)) +
geom_line(lwd = 1) +
geom_ribbon(aes(ymin = lci, ymax = uci, fill = Fleet),
alpha = 0.15, col = 'grey',
show.legend = FALSE) +
scale_x_continuous(limits = c(1980,2020),
breaks = seq(1980,2020,10)) +
scale_fill_manual(values = c(rep('blue',3), 'dodgerblue3',
cbbPalette),
labels = c(custnames)) +
scale_color_manual( values = c(rep('blue',3), 'dodgerblue3',
cbbPalette),
labels = c(custnames)) +
scale_linetype_manual(values = c(rep('solid',4),
rep('dashed',40)),
labels = c(custnames)) +
labs(x = 'Year', y = 'Estimate (mt)', color = "", linetype = "",
title = '',
subtitle = 'BC&AK assessment vals have been multiplied by 1000;
input dat was div by 1000') +
facet_wrap(~Fleet2, scales = 'free_y', ncol = 3)
## compare_all plot ----
rbind(vastc,assc) %>%
filter(Fleet2 %in% c('WC','BC', 'AK')[1:3]) %>%
filter(Fleet %in% c("California_current","British_Columbia",
'Aleutian_Islands',"Gulf_of_Alaska",
"Eastern_Bering_Sea",
'AK_DOM_LL',"AK_GOA_TRW",'BC_OFFSHORE_STD',
"Filter_BCTrawl","Filter_StRS", "AKSHLF",  "NWCBO")[fleetSel]) %>%
filter(Year < 2020) %>%
# filter(Fleet %in% c("British_Columbia","Filter_BCTrawl")) %>%
ggplot(., aes(x = Year, y = Estimate_metric_tons,
col = Fleet, linetype = Fleet)) +
theme_bw()+
# kaputils::theme_black()+
theme(panel.grid = element_blank(),
legend.position = 'right',
legend.text = element_text(size = 12),
strip.text.x = element_text(
size = 16
)) +
geom_line(lwd = 1) +
geom_ribbon(aes(ymin = lci, ymax = uci, fill = Fleet),
alpha = 0.15, col = 'grey',
show.legend = FALSE) +
scale_x_continuous(limits = c(1980,2020),
breaks = seq(1980,2020,10)) +
scale_fill_manual(values = c(rep('blue',3), 'dodgerblue3',
cbbPalette),
labels = c(custnames)) +
scale_color_manual( values = c(rep('blue',3), 'dodgerblue3',
cbbPalette),
labels = c(custnames)) +
scale_linetype_manual(values = c(rep('solid',4),
rep('dashed',40)),
labels = c(custnames)) +
labs(x = 'Year', y = 'Estimate (mt)', color = "", linetype = "",
title = '',
subtitle = 'BC&AK assessment vals have been multiplied by 1000;
input dat was div by 1000') +
facet_wrap(~Fleet2, scales = 'free_y', ncol = 3)
ggsave(plot = last_plot(),
# file = paste0("./figures/",Sys.Date(),"_idx_comparison.png"),
file = paste0(DateFile,"/compare_all-update.png"),
height = 8, width = 12, unit='in',dpi = 320)
ggplot(read.csv(paste0(DateFile,"/Table_for_SS3.csv")) %>%
filter(Fleet != 'Eastern_Bering_Sea' & Fleet != 'AllAreas') ,
# mutate(Year = seq(min(Data_Geostat$Year), max(Data_Geostat$Year))),
aes(x = Year, y = log(Estimate_metric_tons), col = Fleet)) +
theme_bw()+
# theme(panel.grid.minor = element_blank()) +
# scale_y_continuous(limits = c(0,25)) +
scale_color_manual(values = survfltPal[c(1,4,7,9)]) +
labs(x = 'Year', y = 'Estimate log(mt)', title = paste0('VAST-Standardized Indices (log space)')) +
geom_line(lwd = 0.9)+
geom_point(pch = 1, cex = 3) +
labs(y = 'log(mt)')
ggplot(read.csv(paste0(DateFile,"/Table_for_SS3.csv")) %>%
filter(Fleet != 'Eastern_Bering_Sea' & Fleet != 'AllAreas') ,
# mutate(Year = seq(min(Data_Geostat$Year), max(Data_Geostat$Year))),
aes(x = Year, y = log(Estimate_metric_tons), col = Fleet)) +
theme_bw()+
# theme(panel.grid.minor = element_blank()) +
# scale_y_continuous(limits = c(0,25)) +
scale_color_manual(values = survfltPal) +
labs(x = 'Year', y = 'Estimate log(mt)', title = paste0('VAST-Standardized Indices (log space)')) +
geom_line(lwd = 0.9)+
geom_point(pch = 1, cex = 3) +
labs(y = 'log(mt)')
ggplot(read.csv(paste0(DateFile,"/Table_for_SS3.csv")) %>%
filter(Fleet != 'Eastern_Bering_Sea' & Fleet != 'AllAreas') ,
# mutate(Year = seq(min(Data_Geostat$Year), max(Data_Geostat$Year))),
aes(x = Year, y = log(Estimate_metric_tons), col = Fleet)) +
theme_bw()+
# theme(panel.grid.minor = element_blank()) +
scale_y_continuous(limits = c(0,25)) +
scale_color_manual(values = survfltPal) +
labs(x = 'Year', y = 'Estimate log(mt)', title = paste0('VAST-Standardized Indices (log space)')) +
geom_line(lwd = 0.9)+
geom_point(pch = 1, cex = 3) +
labs(y = 'log(mt)')
ggplot(read.csv(paste0(DateFile,"/Table_for_SS3.csv")) %>%
filter(Fleet != 'Eastern_Bering_Sea' & Fleet != 'AllAreas') ,
# mutate(Year = seq(min(Data_Geostat$Year), max(Data_Geostat$Year))),
aes(x = Year, y = log(Estimate_metric_tons), col = Fleet)) +
theme_minimal()+
scale_y_continuous(limits = c(0,25)) +
scale_color_manual(values = survfltPal) +
labs(x = 'Year', y = 'Estimate log(mt)', title = paste0('VAST-Standardized Indices (log space)')) +
geom_line(lwd = 0.9)+
geom_point(pch = 1, cex = 3) +
labs(y = 'log(mt)')
ggplot(read.csv(paste0(DateFile,"/Table_for_SS3.csv")) %>%
filter(Fleet != 'Eastern_Bering_Sea' & Fleet != 'AllAreas') ,
# mutate(Year = seq(min(Data_Geostat$Year), max(Data_Geostat$Year))),
aes(x = Year, y = log(Estimate_metric_tons), col = Fleet)) +
theme_minimal()+
scale_y_continuous(limits = c(5,15)) +
scale_color_manual(values = survfltPal) +
labs(x = 'Year', y = 'Estimate log(mt)', title = paste0('VAST-Standardized Indices (log space)')) +
geom_line(lwd = 0.9)+
geom_point(pch = 1, cex = 3) +
labs(y = 'log(mt)')
load("C:/Users/mkapur/Dropbox/UW/sab-idx/runs/2020-09-22_nx=250_Triennial_WCGBTS_BCs_BCo_AK_DOM_LL_GOA_baseQ=AK_DOM_LL1980_2019/Data_Geostat.Rdata")
library(VAST)
library(TMB)
library(dplyr)
library(tidyr)
library(reshape)
library(mapdata)
library(ggplot2)
# library(nwfscSurvey)
library(here)
if( length(unique(Data_Geostat[,'Survey']))==1  |
length(unique(Data_Geostat[,'Region'])) == 1){
Q_ik <- matrix(0, ncol=1, nrow=nrow(Data_Geostat))
}else{
Q_ik <- ThorsonUtilities::vector_to_design_matrix( Data_Geostat[,'Survey'] )
if( !(BaseQ %in% colnames(Q_ik)) ) stop("Problem with Q_ik")
Q_ik <- Q_ik[,-which(colnames(Q_ik)==BaseQ),drop=FALSE]
}
BaseQ <- c("GOA_late","AK_DOM_late", "AK_DOM_LL","WCGBTS")[3]
length(unique(Data_Geostat[,'Survey']))==1
length(unique(Data_Geostat[,'Region'])) == 1
matrix(0, ncol=1, nrow=nrow(Data_Geostat))
Q_ik <- ThorsonUtilities::vector_to_design_matrix( Data_Geostat[,'Survey'] )
Q_ik
ThorsonUtilities::vector_to_design_matrix( Data_Geostat[,c('Region','Survey'] )
ThorsonUtilities::vector_to_design_matrix( Data_Geostat[,c('Region','Survey')] )
names(Data_Geostat)
ThorsonUtilities::vector_to_design_matrix( Data_Geostat[,c('Region')] )
Q_ik <- ThorsonUtilities::vector_to_design_matrix( Data_Geostat[,'Survey'] )
dim(Q_ik)
dim(Data_Geostat)
Q_ik
BaseQ
unique(Q_ik$AK_DOM_LL)
class(Q_ik)
unique(Q_ik[,6])
!(BaseQ %in% colnames(Q_ik))
BaseQ %in% colnames(Q_ik)
?ThorsonUtilities::vector_to_design_matrix
?ThorsonUtilities::vector_to_design_matrix()
??ThorsonUtilities::vector_to_design_matrix()
head(Data_Geostat)
